// ==========================================================================
// Functions
// ==========================================================================

@function rem($target, $context: $pe-base-fontsize) {
    @return ($target / $context) * 1rem;
    // Need to put *1em to convert units to ems.
}

@function create-color-list($color, $desaturate-val: 10, $lighten-increment: 20) {
    $color-list: (desaturate(darken($color, 10), $desaturate-val), $color);
    $lighten-val: $lighten-increment;
    $desaturate-val: $desaturate-val;
    @while $lighten-val <= ($lighten-increment * 4) {
        $color-list: append($color-list, desaturate(lighten($color, $lighten-val), $desaturate-val), comma);
        $lighten-val: $lighten-val + $lighten-increment;
        @if $desaturate-val == 0 {
            $desaturate-val: 0;
        } @else {
            $desaturate-val: $desaturate-val + 10;
        }
    }
    @return $color-list;
}

@function to-string($value) {
    @return inspect($value);
}
// type-of(100px)  => number
// type-of(asdf)   => string
// type-of("asdf") => string
// type-of(true)   => bool
// type-of(#fff)   => color
// type-of(blue)   => color
// SLICE LIST FROM START TO END  
@function slice($list, $start: 1, $end: length($list)) {
    $result: null;
                
    @if type-of($start) != number or type-of($end) != number {
        
        //@debug "Either $start or $end are not a number for `slice`.";
        
    } @else if $start > $end {
        
        //@debug "The start index has to be lesser than or equals to the end index for `slice`.";

    } @else if $start < 1 or $end < 1 {

        //@debug "List indexes must be non-zero integers for `slice`.";

    } @else if $start > length($list) {

        //@debug "List index is #{$start} but list is only #{length($list)} item long for `slice`.";

    } @else if $end > length($list) {

        //@debug "List index is #{$end} but list is only #{length($list)} item long for `slice`.";

    } @else {

        $result: ();              
        @for $i from $start through $end {
            $result: append($result, nth($list, $i), comma);
        }

    }

    @return $result;
}
